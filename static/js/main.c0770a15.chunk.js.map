{"version":3,"sources":["SelectedFiles.js","OutputVideo.js","ConvertProgress.js","App.js","reportWebVitals.js","index.js"],"names":["SelectedFiles","images","map","image","className","src","URL","createObjectURL","alt","name","OutputVideo","url","controls","href","download","ConvertProgress","progress","ffmpeg","createFFmpeg","log","App","useState","loaded","setLoaded","setImages","videoUrl","setVideoUrl","converting","setConverting","setProgress","load","a","ratio","useEffect","convertToStopMotion","filePromises","fetchFile","Promise","all","imageFiles","i","length","FS","run","data","Blob","buffer","type","multiple","onChange","e","Array","from","target","files","onClick","disabled","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sOAEaA,EAAgB,SAAC,GAAD,IAAEC,EAAF,EAAEA,OAAF,OACzB,8BACKA,EAAOC,KAAI,SAAAC,GACR,OACI,sBAAsBC,UAAU,gBAAhC,UACI,qBAAKC,IAAKC,IAAIC,gBAAgBJ,GAAQC,UAAU,2BAA2BI,IAAI,KAC/E,mBAAGJ,UAAU,4BAAb,SAA0CD,EAAMM,SAF1CN,EAAMM,YCJnBC,EAAc,SAAC,GAAD,IAAEC,EAAF,EAAEA,IAAF,OACvB,gCACI,uBAAOC,UAAQ,EAACP,IAAKM,IACrB,mBAAGP,UAAU,2BAA2BS,KAAMF,EAAKG,UAAU,EAA7D,0BCHKC,EAAkB,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAC7B,OACI,8BAAIA,EAAJ,aCEFC,EAASC,uBAAa,CAACC,KAAK,IA0DnBC,MAxDf,WAAgB,IAAD,EACiBC,oBAAS,GAD1B,mBACJC,EADI,KACIC,EADJ,OAEiBF,mBAAS,IAF1B,mBAEJpB,EAFI,KAEIuB,EAFJ,OAGqBH,mBAAS,MAH9B,mBAGJI,EAHI,KAGMC,EAHN,OAIyBL,oBAAS,GAJlC,mBAIJM,EAJI,KAIQC,EAJR,OAKqBP,mBAAS,MAL9B,mBAKJL,EALI,KAKMa,EALN,KAMLC,EAAI,uCAAG,sBAAAC,EAAA,sEACHd,EAAOa,OADJ,OAETb,EAAOY,aAAY,YAAc,IAAZG,EAAW,EAAXA,MACjBH,EAAoB,IAARG,MAEhBT,GAAU,GALD,2CAAH,qDAQVU,qBAAU,WACNH,MACD,IAEH,IAAMI,EAAmB,uCAAG,oCAAAH,EAAA,6DACxBH,GAAc,GAERO,EAAelC,EAAOC,KAAI,SAAAC,GAAK,OAAIiC,oBAAUjC,MAH3B,SAICkC,QAAQC,IAAIH,GAJb,OAKxB,IADMI,EAJkB,OAKfC,EAAI,EAAGA,EAAID,EAAWE,OAAQD,IACnCvB,EAAOyB,GAAG,YAAazC,EAAOuC,GAAG/B,KAAM8B,EAAWC,IAN9B,gBAQlBvB,EAAO0B,IAAI,aAAc,IAAK,gBAAiB,OAAQ,KAAM,QAAS,OAAQ,UAAW,MAAO,kBAAmB,WARjG,OASlBC,EAAO3B,EAAOyB,GAAG,WAAY,WAC7B/B,EAAML,IAAIC,gBAAgB,IAAIsC,KAAK,CAACD,EAAKE,QAAS,CAACC,KAAM,eAC/DrB,EAAYf,GACZiB,GAAc,GAZU,4CAAH,qDAezB,OAAON,EACC,sBAAKlB,UAAU,2CAAf,UACI,gCACI,uBAAO4C,UAAU,EAAMD,KAAK,OAAOE,SAAU,SAACC,GAAD,OAAO1B,EAAU2B,MAAMC,KAAKF,EAAEG,OAAOC,SAC3ElD,UAAU,2BACjB,wBAAQmD,QAASrB,EAAqBsB,SAAU7B,EACxCvB,UAAW,6BAA+BuB,EAAa,mBAAqB,IADpF,wBAIJ,gCACKX,GAAY,cAAC,EAAD,CAAiBA,SAAUA,IACvCS,GAAY,cAAC,EAAD,CAAad,IAAKc,IAC/B,cAAC,EAAD,CAAexB,OAAQA,UAK/B,4CC9CGwD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c0770a15.chunk.js","sourcesContent":["import React from 'react';\n\nexport const SelectedFiles = ({images}) => (\n    <div>\n        {images.map(image => {\n            return (\n                <div key={image.name} className=\"image-preview\">\n                    <img src={URL.createObjectURL(image)} className=\"image-preview__thumbnail\" alt=\"\"/>\n                    <p className=\"image-preview__image-name\">{image.name}</p>\n                </div>\n            );\n        })}\n    </div>\n)","import React from 'react';\n\nexport const OutputVideo = ({url}) => (\n    <div>\n        <video controls src={url}/>\n        <a className=\"button button--secondary\" href={url} download={true}>Download</a>\n    </div>\n)","import React from 'react';\n\nexport const ConvertProgress = ({progress}) => {\n    return (\n        <p>{progress} / 100</p>\n    );\n}","import {createFFmpeg, fetchFile} from \"@ffmpeg/ffmpeg\";\nimport React, {useState, useEffect} from \"react\";\nimport {SelectedFiles} from \"./SelectedFiles\";\nimport {OutputVideo} from \"./OutputVideo\";\nimport {ConvertProgress} from \"./ConvertProgress\";\n\nconst ffmpeg = createFFmpeg({log: false});\n\nfunction App() {\n    const [loaded, setLoaded] = useState(false);\n    const [images, setImages] = useState([]);\n    const [videoUrl, setVideoUrl] = useState(null);\n    const [converting, setConverting] = useState(false);\n    const [progress, setProgress] = useState(null);\n    const load = async () => {\n        await ffmpeg.load();\n        ffmpeg.setProgress(({ratio}) => {\n            setProgress(ratio * 100);\n        });\n        setLoaded(true);\n    }\n\n    useEffect(() => {\n        load();\n    }, []);\n\n    const convertToStopMotion = async () => {\n        setConverting(true);\n\n        const filePromises = images.map(image => fetchFile(image));\n        const imageFiles = await Promise.all(filePromises);\n        for (let i = 0; i < imageFiles.length; i++) {\n            ffmpeg.FS('writeFile', images[i].name, imageFiles[i]);\n        }\n        await ffmpeg.run('-framerate', '1', '-pattern_type', 'glob', '-i', '*.jpg', '-c:v', 'libx264', '-vf', 'scale=1920:1080', 'out.mp4');\n        const data = ffmpeg.FS('readFile', 'out.mp4');\n        const url = URL.createObjectURL(new Blob([data.buffer], {type: 'video/mp4'}));\n        setVideoUrl(url);\n        setConverting(false);\n    }\n\n    return loaded ? (\n            <div className=\"flex flex-col items-center w-full h-full\">\n                <div>\n                    <input multiple={true} type=\"file\" onChange={(e) => setImages(Array.from(e.target.files))}\n                           className=\"button button--primary\"/>\n                    <button onClick={convertToStopMotion} disabled={converting}\n                            className={\"button button--secondary \" + (converting ? 'button--disabled' : '')}>Convert\n                    </button>\n                </div>\n                <div>\n                    {progress && <ConvertProgress progress={progress}/>}\n                    {videoUrl && <OutputVideo url={videoUrl}/>}\n                    <SelectedFiles images={images}/>\n                </div>\n            </div>\n        ) :\n        (\n            <p>\n                Loading...\n            </p>\n        );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}